# auto-generated by grc.converter

id: uhd_rfnoc_ofdm_schmidlcox
label: 'RFNoC: OFDM Sync'

parameters:
-   id: fft_size
    label: FFT Size
    dtype: int
    default: '64'
    options: ['8', '16', '32', '64', '128', '256', '512', '1024', '2048', '4096']
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: cp_len
    label: Cyclic Prefix Length
    dtype: int
    default: '16'
-   id: threshold
    label: Threshold
    dtype: real
    default: '0.875'
-   id: delay
    label: delay
    dtype: int
    default: '146'
-   id: max_num_symbols
    label: Max Num Symbols
    dtype: int
    default: '12'
-   id: block_index
    label: Block Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(block_index) < 0 else 'none') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: fpga_module_name
    label: FPGA Module Name
    category: RFNoC Config
    dtype: string
    default: noc_block_schmidl_cox
    hide: all

inputs:
-   domain: stream
    dtype: complex
    vlen: ${ fft_size }

outputs:
-   domain: stream
    dtype: complex
    vlen: ${ fft_size }
asserts:
- ${ fft_size in [2**n for n in xrange(3, 11)] }

templates:
    imports: import ettus
    make: |
        ettus.rfnoc_generic(
            self.device3,
            uhd.stream_args(
                cpu_format="fc32", \# TODO: This must be made an option
                otw_format="sc16",
                args=""
            ),
            uhd.stream_args(
                cpu_format="fc32", \# TODO: This must be made an option
                otw_format="sc16",
                args="",
            ),
            "SchmidlCox", ${block_index}, ${device_index},
        )
        self.${id}.set_arg("fftsize", ${fft_size})
        self.${id}.set_arg("frame_len", ${fft_size})
        self.${id}.set_arg("cp_len", ${cp_len})
        self.${id}.set_arg("threshold", ${threshold})
        self.${id}.set_arg("delay", ${delay})
        self.${id}.set_arg("max_num_symbols", ${max_num_symbols})
    callbacks:
    - set_arg("fftsize", ${fft_size})
    - set_arg("frame_len", ${fft_size})
    - set_arg("cp_len", ${cp_len})
    - set_arg("threshold", ${threshold})
    - set_arg("delay", ${delay})
    - set_arg("max_num_symbols", ${max_num_symbols})

file_format: 1
