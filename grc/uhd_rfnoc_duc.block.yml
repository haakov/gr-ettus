# auto-generated by grc.converter

id: uhd_rfnoc_streamer_duc
label: 'RFNoC: DUC'

parameters:
-   id: input_rate
    label: Input Rate
    dtype: real
    default: samp_rate
-   id: output_rate
    label: Output Rate
    dtype: real
    default: decim_rate
-   id: freq
    label: Frequency (CORDIC)
    dtype: real
    default: '0.0'
-   id: fullscale
    label: Full scale
    category: Advanced
    dtype: real
    default: '1.0'
    hide: part
-   id: block_index
    label: Block Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(block_index) < 0 else 'none') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: fpga_module_name
    label: FPGA Module Name
    category: RFNoC Config
    dtype: string
    default: noc_block_duc
    hide: all
-   id: grvlen
    label: Force Vector Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }

inputs:
-   domain: stream
    dtype: complex
    vlen: ${ grvlen }

outputs:
-   domain: stream
    dtype: complex
    vlen: ${ grvlen }
asserts:
- ${ output_rate >= input_rate }
- ${ output_rate <= input_rate*512 }

templates:
    imports: import ettus
    make: |-
        ettus.rfnoc_generic(
            self.device3,
            uhd.stream_args( \# TX Stream Args
                cpu_format="fc32", \# TODO: This must be made an option
                otw_format="sc16",
                args="input_rate={},output_rate={},fullscale={},freq={}".format(${input_rate}, ${output_rate}, ${fullscale}, ${freq}),
            ),
            uhd.stream_args( \# RX Stream Args
                cpu_format="fc32", \# TODO: This must be made an option
                otw_format="sc16",
                args="",
            ),
            "DUC", ${block_index}, ${device_index},
        )
    callbacks:
    - set_arg("freq", ${freq})
    - set_arg("input_rate", float(${input_rate}))
    - set_arg("output_rate", float(${output_rate}))

file_format: 1
