# auto-generated by grc.converter

id: uhd_rfnoc_streamer_vector_iir
label: 'RFNoC: Vector IIR'

parameters:
-   id: vlen
    label: Vector Length
    dtype: int
    default: '256'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: alpha
    label: Alpha
    dtype: float
    default: '0.984375'
-   id: beta
    label: Beta
    dtype: float
    default: '0.015625'
-   id: block_index
    label: Vector-IIR Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(block_index) < 0 else 'none') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: fpga_module_name
    label: FPGA Module Name
    category: RFNoC Config
    dtype: string
    default: noc_block_vector_iir
    hide: all

inputs:
-   domain: stream
    dtype: complex
    vlen: ${ vlen }

outputs:
-   domain: stream
    dtype: complex
    vlen: ${ vlen }
asserts:
- ${ (vlen > 0 and vlen <= 4096) }
- ${ (alpha >= 0.0 and alpha <= 1.0) }
- ${ (beta >= 0.0 and beta <= 1.0) }

templates:
    imports: import ettus
    make: "ettus.rfnoc_generic(\n      self.device3,\n      uhd.stream_args( \\# TX\
        \ Stream Args\n          cpu_format=\"fc32\",\n          otw_format=\"sc16\"\
        ,\n          args=\"spp={},alpha={},beta={}\".format(${vlen}, ${alpha}, ${beta}),\n\
        \      ),\n      uhd.stream_args( \\# TX Stream Args\n          cpu_format=\"\
        fc32\",\n          otw_format=\"sc16\",\n          args=\"spp={},alpha={},beta={}\"\
        .format(${vlen}, ${alpha}, ${beta}),\n      ),\n      \"VectorIIR\", ${block_index},\
        \ ${device_index},\n)\nself.${id}.set_arg(\"alpha\", ${alpha})\nself.${id}.set_arg(\"\
        beta\",  ${beta})\n  "
    callbacks:
    - set_arg("alpha", ${alpha})
    - set_arg("beta", ${beta})

file_format: 1
