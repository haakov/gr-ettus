# auto-generated by grc.converter

id: uhd_rfnoc_fosphor_display
label: RFNoC QT fosphor display

parameters:
-   id: center_freq
    label: Center Frequency
    dtype: real
    default: '0'
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate
-   id: fft_bins
    label: FFT bins
    dtype: int
    default: '1024'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: pwr_bins
    label: Power bins
    dtype: int
    default: '64'
-   id: wf_enabled
    label: Waterfall
    dtype: enum
    options: ['True', 'False']
    option_labels: [Enabled, Disabled]
-   id: wf_lines
    label: Waterfall history
    dtype: int
    default: '512'
    hide: ${ ('all' if str(wf_enabled) == 'False' else 'none') }
-   id: grid_enabled
    label: Grid
    dtype: enum
    options: ['True', 'False']
    option_labels: [Enabled, Disabled]
-   id: palette
    label: Color Palette
    dtype: enum
    options: [iron, cubehelix, sdrangelove_histogram, rainbow, prog]
    option_labels: [Iron, Cube Helix, SDRangelove, Rainbow, prog's]
-   id: frame_rate
    label: Target Frame Rate
    dtype: int
    default: '30'
-   id: gui_hint
    label: GUI Hint
    dtype: gui_hint
    hide: part

inputs:
-   label: in_hist
    domain: stream
    dtype: byte
    vlen: ${ fft_bins }
-   label: in_wf
    domain: stream
    dtype: byte
    vlen: ${ fft_bins }
    optional: true
    hide: ${ ('True' if str(wf_enabled) == 'False' else 'False') }

outputs:
-   domain: message
    id: cfg
    optional: true

templates:
    imports: |-
        from PyQt4 import Qt
        import sip
        import ettus
    make: |-
        <% win = 'self._%s_win'%id %>
        ettus.fosphor_display(${fft_bins}, ${pwr_bins}, ${wf_lines})
        self.${id}.set_frame_rate(${frame_rate})
        self.${id}.set_frequency_range(${center_freq}, ${samp_rate})
        self.${id}.set_waterfall(${wf_enabled})
        self.${id}.set_grid(${grid_enabled})
        self.${id}.set_palette("$palette")
        self._${id}_win = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)
        ${gui_hint(in)}
    callbacks:
    - set_frequency_range(${center_freq}, ${samp_rate})

documentation: |-
    The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.

file_format: 1
