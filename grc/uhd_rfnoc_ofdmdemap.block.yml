# auto-generated by grc.converter

id: uhd_rfnoc_ofdm_demap
label: 'RFNoC: OFDM Constellation Demap'

parameters:
-   id: fft_size
    label: FFT Size
    dtype: int
    default: '64'
    options: ['8', '16', '32', '64', '128', '256', '512', '1024', '2048', '4096']
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: mod_order
    label: Modulation
    dtype: int
    default: '4'
    options: ['2', '4', '16', '64']
    option_labels: [BPSK, QPSK, 16-QAM, 64-QAM]
-   id: scaling
    label: Scaling
    dtype: real
    default: '1.4142135623730951'
    options: [1.0/2.0, 1.4142135623730951/2.0, 3.1622776601683795/6.0, 6.48074069840786/14.0]
    option_labels: [BPSK, QPSK, 16-QAM, 64-QAM]
-   id: output_type
    label: Output
    dtype: enum
    options: ['0', '1']
    option_labels: [Bits, Symbols]
    option_attributes:
        type: [byte, complex]
    hide: part
-   id: block_index
    label: Block Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(block_index) < 0 else 'none') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: fpga_module_name
    label: FPGA Module Name
    category: RFNoC Config
    dtype: string
    default: noc_block_ofdmdemap
    hide: all

inputs:
-   domain: stream
    dtype: complex
    vlen: ${ fft_size }

outputs:
-   domain: stream
    dtype: ${ output_type.type }
    vlen: ${ fft_size }
asserts:
- ${ fft_size in [2**n for n in xrange(3, 11)] }

templates:
    imports: import ettus
    make: |
        ettus.rfnoc_generic(
            self.device3,
            uhd.stream_args( \# TX Stream Args
                cpu_format="fc32",
                otw_format="sc16",
                args="",
            ),
            uhd.stream_args( \# RX Stream Args
                cpu_format="fc32",
                otw_format="sc16",
                args="",
            ),
            "OFDMDemap", ${block_index}, ${device_index},
        )
        self.${id}.set_arg("fftsize", ${fft_size})
        self.${id}.set_arg("pkt_len", ${fft_size}*4)
        self.${id}.set_arg("mod_order", ${mod_order})
        self.${id}.set_arg("scaling", ${scaling})
        self.${id}.set_arg("output_symbols", ${output_type})
    callbacks:
    - set_arg("fftsize", ${fft_size})
    - set_arg("pkt_len", ${fft_size}*4)
    - set_arg("mod_order", ${mod_order})
    - set_arg("scaling", ${scaling})
    - set_arg("output_symbols", ${output_type})

file_format: 1
