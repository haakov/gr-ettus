# auto-generated by grc.converter

id: uhd_rfnoc_streamer_logpwr
label: 'RFNoC: Log Power'

parameters:
-   id: type
    label: Host Data Type
    dtype: enum
    options: [fc32, sc16]
    option_labels: [Complex float32, Complex int16]
    option_attributes:
        type: [fc32, sc16]
    hide: part
-   id: block_index
    label: LogPwr Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(block_index) < 0 else 'none') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: fpga_module_name
    label: FPGA Module Name
    category: RFNoC Config
    dtype: string
    default: noc_block_logpwr
    hide: all
-   id: grvlen
    label: Force Vector Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }

inputs:
-   domain: stream
    dtype: ${ type.type }
    vlen: ${ grvlen }

outputs:
-   domain: stream
    dtype: ${ type.type }
    vlen: ${ grvlen }

templates:
    imports: import ettus
    make: |-
        ettus.rfnoc_generic(
            self.device3,
            uhd.stream_args( \# TX Stream Args
                cpu_format="$type",
                otw_format="sc16",
                args="gr_vlen={0},{1}".format(${grvlen}, "" if ${grvlen} == 1 else "spp={0}".format(${grvlen})),
            ),
            uhd.stream_args( \# RX Stream Args
                cpu_format="$type",
                otw_format="sc16",
                args="gr_vlen={0},{1}".format(${grvlen}, "" if ${grvlen} == 1 else "spp={0}".format(${grvlen})),
            ),
            "LogPwr", ${block_index}, ${device_index},
        )

file_format: 1
